pg.poly <- lm(First~poly(Age,3)+poly(G,3)+poly(GS,3)+poly(MP,3)+poly(FG,3)+poly(FG.,3)+poly(X3P,3)+poly(X3P.,3)+poly(X2P.,3)+
poly(FT.,3)+poly(ORB,3)+poly(DRB,3)+poly(AST,3)+poly(STL,3)+poly(BLK,3)+poly(TOV,3)+poly(PF,3)+
poly(PTS,3)+poly(Team.Wins,3),data=pg.shortlist)
## poly pred
pg.poly.pred<-predMVPs(pg.shortlist,pg.poly)
pg.poly.acc<-calcAccuracy(pg.poly.pred,FALSE)
pg.shortlist
#######################################################
################# TOTAL STATS MODELS ##################
#######################################################
## fit shortlist model
dat_totals$Shortlist<-dat_totals$Share!=0
tot.short.mod <- glm(Shortlist~G+MP+X3P+DRB+AST+
BLK+TOV+PF+PTS+Team.Wins,data=dat_totals,family = binomial(link = "logit"))
## grab shortlist
tot.shortlist<-dat_totals[which(predict(tot.short.mod,type="response")>SHORT_CUTOFF),]
## fit linear
tot.lm <- lm(First~G+X3P+DRB+AST+BLK+PF+PTS+Team.Wins,data=tot.shortlist)
## linear pred
tot.lm.pred<-predMVPs(tot.shortlist,tot.lm)
tot.lm.acc<-calcAccuracy(tot.lm.pred,FALSE)
## fit logit
tot.log <- glm(MVP~G+X3P+DRB+AST+BLK+PF+PTS+Team.Wins,data=tot.shortlist,family = binomial(link = "logit"))
## logit pred
tot.log.pred<-predMVPs(tot.shortlist,tot.log)
tot.log.acc<-calcAccuracy(tot.log.pred,FALSE)
## LASSO
library(glmnet)
x = model.matrix(First~as.factor(Pos)+Age+G+GS+MP+FG+FGA+FG.+X3P+X3PA+X3P.+X2P+X2PA+X2P.+
eFG.+FT+FTA+FT.+ORB+DRB+TRB+AST+STL+BLK+TOV+PF+PTS+Team.Wins,data=tot.shortlist)
y = tot.shortlist$First
tot.cv.out <- cv.glmnet(x,y,alpha=1)
lasso.coef=predict(tot.cv.out,type="coefficients",s=tot.cv.out$lambda.min)
## fit poly
tot.poly <- lm(First~poly(G,3)+poly(X3P,3)+poly(DRB,3)+poly(AST,3)+poly(BLK,3)+poly(PF,3)+
poly(PTS,3)+poly(Team.Wins,3),data=tot.shortlist)
## poly pred
tot.poly.pred<-predMVPs(tot.shortlist,tot.poly)
tot.poly.acc<-calcAccuracy(tot.poly.pred,FALSE)
#######################################################
################ ADVANCED STATS MODELS ################
#######################################################
## fit shortlist model
dat_adv$Shortlist<-dat_adv$Share!=0
adv.short.mod <- glm(Shortlist~G+MP+PER+TS.+X3PAr+FTr+ORB.+DRB.+TRB.+AST.+STL.+BLK.+
TOV.+USG.+OWS+DWS+WS+WS.48+OBPM+DBPM+BPM+VORP+Team.Wins,
data=dat_adv,family = binomial(link = "logit"))
## grab shortlist
adv.shortlist<-dat_adv[which(predict(adv.short.mod,type="response")>SHORT_CUTOFF),]
## fit linear
adv.lm <- lm(First~G+PER+TS.+X3PAr+FTr+TRB.+AST.+STL.+BLK.+
TOV.+USG.+WS+BPM+VORP+Team.Wins,
data=adv.shortlist)
## linear pred
adv.lm.pred<-predMVPs(adv.shortlist,adv.lm)
adv.lm.acc<-calcAccuracy(adv.lm.pred,FALSE)
## fit logit
adv.log <- glm(MVP~PER+TS.+X3PAr+FTr+TRB.+AST.+STL.+BLK.+
TOV.+USG.+WS+BPM+VORP+Team.Wins
,data=adv.shortlist,family = binomial(link = "logit"))
## logit pred
adv.log.pred<-predMVPs(adv.shortlist,adv.log)
adv.log.acc<-calcAccuracy(adv.log.pred,FALSE)
## LASSO
#library(glmnet)
x = model.matrix(First~G+MP+PER+TS.+X3PAr+FTr+ORB.+DRB.+TRB.+AST.+STL.+BLK.+
TOV.+USG.+OWS+DWS+WS+WS.48+OBPM+DBPM+BPM+VORP+Team.Wins
,data=adv.shortlist)
y = adv.shortlist$First
adv.cv.out <- cv.glmnet(x,y,alpha=1)
adv.lasso.coef=predict(adv.cv.out,type="coefficients",s=adv.cv.out$lambda.min)
## fit poly
adv.poly <- lm(First~poly(PER,3)+poly(TS.,3)+poly(X3PAr,3)+poly(FTr,3)+poly(TRB.,3)+poly(AST.,3)+poly(STL.,3)+poly(BLK.,3)+
poly(TOV.,3)+poly(USG.,3)+poly(WS,3)+poly(BPM,3)+poly(VORP,3)+poly(Team.Wins,3),
data=adv.shortlist)
## poly pred
adv.poly.pred<-predMVPs(adv.shortlist,adv.poly)
adv.poly.acc<-calcAccuracy(adv.poly.pred,FALSE)
#######################################################
##################### MERGED DATA  ####################
#######################################################
## merge data
dat_merge <- dat_totals
adv_subset <- dat_adv[,c(2,3,12,13,14,15,18,19,20,21,22,23,26,30,31)]
dat_merge <- merge(dat_merge,adv_subset,by=c("Player","Season"))
## grab shortlist
merge.shortlist<-dat_merge[which(predict(tot.short.mod,newdata = dat_merge,type="response")>SHORT_CUTOFF),]
## predict for each model
merge.tot.pred<-predict(tot.log,newdata=merge.shortlist,type="response")
merge.adv.pred<-predict(adv.log,newdata=merge.shortlist,type="response")
merge.pred <- (merge.tot.pred + merge.adv.pred) / 2
## select MVPS
### create empty MVPs dataframe
merge.mvps<-merge.shortlist[0,]
for (year in levels(as.factor(merge.shortlist$Season))) {
dat_temp<-merge.shortlist[which(merge.shortlist$Season==year),]
temp_preds<-merge.pred[which(merge.shortlist$Season==year)]
mvp<-dat_temp[which(temp_preds==max(temp_preds)),]
merge.mvps<-data.frame(rbind(as.matrix(merge.mvps), as.matrix(mvp)))
}
merge.acc<-calcAccuracy(merge.mvps,FALSE)
## fit linear
merge.lm <- lm(First~G+PER+TS.+X3PAr+FTr+TRB.+AST.+STL.+BLK.+
TOV.+USG.+WS+BPM+VORP+Team.Wins+X3P+DRB+
AST+BLK+PF+PTS,
data=merge.shortlist)
## linear pred
merge.lm.pred<-predMVPs(merge.shortlist,merge.lm)
merge.lm.acc<-calcAccuracy(merge.lm.pred,FALSE)
## fit logit
merge.log <- glm(MVP~G+PER+TS.+X3PAr+FTr+TRB.+AST.+STL.+BLK.+
TOV.+USG.+WS+BPM+VORP+Team.Wins+X3P+DRB+
AST+BLK+PF+PTS,
data=merge.shortlist,family = binomial(link = "logit"))
## logit pred
merge.log.pred<-predMVPs(merge.shortlist,merge.log)
merge.log.acc<-calcAccuracy(merge.log.pred,FALSE)
## fit poly
merge.poly <- lm(First~poly(G,3)+poly(PER,3)+poly(TS.,3)+poly(X3PAr,3)+poly(FTr,3)+poly(TRB.,3)+
poly(AST.,3)+poly(STL.,3)+poly(BLK.,3)+poly(TOV.,3)+poly(USG.,3)+poly(WS,3)+
poly(BPM,3)+poly(VORP,3)+poly(Team.Wins,3)+poly(PER,3)+poly(TS.,3)+poly(X3PAr,3)+
poly(FTr,3)+poly(TRB.,3)+poly(AST.,3)+poly(STL.,3)+poly(BLK.,3)+poly(TOV.,3)+
poly(USG.,3)+poly(WS,3)+poly(BPM,3)+poly(VORP,3),
data=merge.shortlist)
## poly pred
merge.poly.pred<-predMVPs(merge.shortlist,merge.poly)
merge.poly.acc<-calcAccuracy(merge.poly.pred,FALSE)
######################################################
################## CROSS VALIDATION ###################
#######################################################
# total data
tlm.cv.acc<-accuracyCV(tot.shortlist,tot.lm)
tlog.cv.acc<-accuracyCV(tot.shortlist,tot.log)
tpoly.cv.acc<-accuracyCV(tot.shortlist,tot.poly)
# per game data
plm.cv.acc<-accuracyCV(pg.shortlist,pg.lm)
plog.cv.acc<-accuracyCV(pg.shortlist,pg.log)
ppoly.cv.acc<-accuracyCV(pg.shortlist,pg.poly)
# advanced data
alm.cv.acc<-accuracyCV(adv.shortlist,adv.lm)
alog.cv.acc<-accuracyCV(adv.shortlist,adv.log)
apoly.cv.acc<-accuracyCV(adv.shortlist,adv.poly)
# merged data
mlm.cv.acc<-accuracyCV(merge.shortlist,merge.lm)
mlog.cv.acc<-accuracyCV(merge.shortlist,merge.log)
mpoly.cv.acc<-accuracyCV(merge.shortlist,merge.poly)
## aggregate model
agglm.cv.acc<-aggregateCV(merge.shortlist,merge.lm,merge.log)
agglog.cv.acc<-aggregateCV(merge.shortlist,tot.log,pg.log)
aggpoly.cv.acc<-aggregateCV(merge.shortlist,tot.poly,pg.poly)
#######################################################
#################### SUMMARY PLOTS ####################
#######################################################
accs <- data.frame(Data=c("dat_tot","dat_pergame","dat_adv","dat_merge"),
Linear=c(tot.lm.acc,pg.lm.acc,adv.lm.acc,merge.lm.acc),
Logistic=c(tot.log.acc,pg.log.acc,adv.log.acc,merge.log.acc),
Cubic=c(tot.poly.acc,pg.poly.acc,adv.poly.acc,merge.poly.acc),
LOOCV.lm=c(tlm.cv.acc,plm.cv.acc,alm.cv.acc,mlm.cv.acc),
LOOCV.log=c(tlog.cv.acc,plog.cv.acc,alog.cv.acc,mlog.cv.acc),
LOOCV.poly=c(tpoly.cv.acc,ppoly.cv.acc,apoly.cv.acc,mpoly.cv.acc))
par(mfrow=c(1,1))
#library(RColorBrewer)
library(viridis)
vir=viridis(6)
xx=barplot(c(accs$Linear,accs$LOOCV.lm,accs$Logistic,accs$LOOCV.log,accs$Cubic,accs$LOOCV.poly),
names.arg=rep(accs$Data,times=6),
ylim=c(0,1),
las=2,
col=c(rep(vir[1],4),rep(vir[2],4),rep(vir[3],4),rep(vir[4],4),rep(vir[5],4),rep(vir[6],4)),
ylab="Accuracy",
main="Model Accuracies - 1980-2018"
)
if(NORM){
str<-"Normalized -"
} else {
str<-"Unnormalized -"
}
mtext(paste(str,"Shortlist",SHORT_CUTOFF,"cutoff"))
text(x=xx,
y=c(accs$Linear,accs$LOOCV.lm,accs$Logistic,accs$LOOCV.log,accs$Cubic,accs$LOOCV.poly),
label=round(c(accs$Linear,accs$LOOCV.lm,accs$Logistic,accs$LOOCV.log,accs$Cubic,accs$LOOCV.poly),digits=3),
pos=3
)
legend("bottomright",
c("Linear","Linear LOOCV","Logistic","Logistic LOOCV","Cubic","Cubic LOOCV"),
fill=vir,
cex=0.8
)
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
#######################################################
#################### SUMMARY PLOTS ####################
#######################################################
accs <- data.frame(Data=c("dat_tot","dat_pergame","dat_adv","dat_merge"),
Linear=c(tot.lm.acc,pg.lm.acc,adv.lm.acc,merge.lm.acc),
Logistic=c(tot.log.acc,pg.log.acc,adv.log.acc,merge.log.acc),
Cubic=c(tot.poly.acc,pg.poly.acc,adv.poly.acc,merge.poly.acc),
LOOCV.lm=c(tlm.cv.acc,plm.cv.acc,alm.cv.acc,mlm.cv.acc),
LOOCV.log=c(tlog.cv.acc,plog.cv.acc,alog.cv.acc,mlog.cv.acc),
LOOCV.poly=c(tpoly.cv.acc,ppoly.cv.acc,apoly.cv.acc,mpoly.cv.acc))
par(mfrow=c(1,1))
#library(RColorBrewer)
library(viridis)
vir=viridis(6)
xx=barplot(c(accs$Linear,accs$LOOCV.lm,accs$Logistic,accs$LOOCV.log,accs$Cubic,accs$LOOCV.poly),
names.arg=rep(accs$Data,times=6),
ylim=c(0,1),
las=2,
col=c(rep(vir[1],4),rep(vir[2],4),rep(vir[3],4),rep(vir[4],4),rep(vir[5],4),rep(vir[6],4)),
ylab="Accuracy",
main=paste("Model Accuracies -",YEAR_START,"-",YEAR_END)
)
if(NORM){
str<-"Normalized -"
} else {
str<-"Unnormalized -"
}
mtext(paste(str,"Shortlist",SHORT_CUTOFF,"cutoff"))
text(x=xx,
y=c(accs$Linear,accs$LOOCV.lm,accs$Logistic,accs$LOOCV.log,accs$Cubic,accs$LOOCV.poly),
label=round(c(accs$Linear,accs$LOOCV.lm,accs$Logistic,accs$LOOCV.log,accs$Cubic,accs$LOOCV.poly),digits=3),
pos=3
)
legend("bottomright",
c("Linear","Linear LOOCV","Logistic","Logistic LOOCV","Cubic","Cubic LOOCV"),
fill=vir,
cex=0.8
)
#######################################################
#################### SUMMARY PLOTS ####################
#######################################################
accs <- data.frame(Data=c("dat_tot","dat_pergame","dat_adv","dat_merge"),
Linear=c(tot.lm.acc,pg.lm.acc,adv.lm.acc,merge.lm.acc),
Logistic=c(tot.log.acc,pg.log.acc,adv.log.acc,merge.log.acc),
Cubic=c(tot.poly.acc,pg.poly.acc,adv.poly.acc,merge.poly.acc),
LOOCV.lm=c(tlm.cv.acc,plm.cv.acc,alm.cv.acc,mlm.cv.acc),
LOOCV.log=c(tlog.cv.acc,plog.cv.acc,alog.cv.acc,mlog.cv.acc),
LOOCV.poly=c(tpoly.cv.acc,ppoly.cv.acc,apoly.cv.acc,mpoly.cv.acc))
par(mfrow=c(1,1))
#library(RColorBrewer)
library(viridis)
vir=viridis(6)
xx=barplot(c(accs$Linear,accs$LOOCV.lm,accs$Logistic,accs$LOOCV.log,accs$Cubic,accs$LOOCV.poly),
names.arg=rep(accs$Data,times=6),
ylim=c(0,1),
las=2,
col=c(rep(vir[1],4),rep(vir[2],4),rep(vir[3],4),rep(vir[4],4),rep(vir[5],4),rep(vir[6],4)),
ylab="Accuracy",
main=paste("Model Accuracies -",YEAR_START,"-",YEAR_END)
)
if(NORM){
str<-"Normalized -"
} else {
str<-"Unnormalized -"
}
mtext(paste(str,"Shortlist",SHORT_CUTOFF,"cutoff"))
text(x=xx,
y=c(accs$Linear,accs$LOOCV.lm,accs$Logistic,accs$LOOCV.log,accs$Cubic,accs$LOOCV.poly),
label=round(c(accs$Linear,accs$LOOCV.lm,accs$Logistic,accs$LOOCV.log,accs$Cubic,accs$LOOCV.poly),digits=3),
pos=3
)
legend("bottomright",
c("Linear","Linear LOOCV","Logistic","Logistic LOOCV","Cubic","Cubic LOOCV"),
fill=vir,
cex=0.8
)
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
merge.poly.acc
#######################################################
################## CROSS VALIDATION ###################
#######################################################
# total data
tlm.cv.acc<-accuracyCV(tot.shortlist,tot.lm)
tlog.cv.acc<-accuracyCV(tot.shortlist,tot.log)
tpoly.cv.acc<-accuracyCV(tot.shortlist,tot.poly)
# per game data
plm.cv.acc<-accuracyCV(pg.shortlist,pg.lm)
plog.cv.acc<-accuracyCV(pg.shortlist,pg.log)
ppoly.cv.acc<-accuracyCV(pg.shortlist,pg.poly)
# advanced data
alm.cv.acc<-accuracyCV(adv.shortlist,adv.lm)
alog.cv.acc<-accuracyCV(adv.shortlist,adv.log)
apoly.cv.acc<-accuracyCV(adv.shortlist,adv.poly)
# merged data
mlm.cv.acc<-accuracyCV(merge.shortlist,merge.lm)
mlog.cv.acc<-accuracyCV(merge.shortlist,merge.log)
mpoly.cv.acc<-accuracyCV(merge.shortlist,merge.poly)
## aggregate model
agglm.cv.acc<-aggregateCV(merge.shortlist,merge.lm,merge.log)
agglog.cv.acc<-aggregateCV(merge.shortlist,tot.log,pg.log)
aggpoly.cv.acc<-aggregateCV(merge.shortlist,tot.poly,pg.poly)
aggpoly.cv.acc
agglog.cv.acc
agglm.cv.acc
######################################################
#################### SUMMARY PLOTS ####################
#######################################################
accs <- data.frame(Data=c("dat_tot","dat_pergame","dat_adv","dat_merge"),
Linear=c(tot.lm.acc,pg.lm.acc,adv.lm.acc,merge.lm.acc),
Logistic=c(tot.log.acc,pg.log.acc,adv.log.acc,merge.log.acc),
Cubic=c(tot.poly.acc,pg.poly.acc,adv.poly.acc,merge.poly.acc),
LOOCV.lm=c(tlm.cv.acc,plm.cv.acc,alm.cv.acc,mlm.cv.acc),
LOOCV.log=c(tlog.cv.acc,plog.cv.acc,alog.cv.acc,mlog.cv.acc),
LOOCV.poly=c(tpoly.cv.acc,ppoly.cv.acc,apoly.cv.acc,mpoly.cv.acc))
par(mfrow=c(1,1))
#library(RColorBrewer)
library(viridis)
vir=viridis(6)
xx=barplot(c(accs$Linear,accs$LOOCV.lm,accs$Logistic,accs$LOOCV.log,accs$Cubic,accs$LOOCV.poly),
names.arg=rep(accs$Data,times=6),
ylim=c(0,1),
las=2,
col=c(rep(vir[1],4),rep(vir[2],4),rep(vir[3],4),rep(vir[4],4),rep(vir[5],4),rep(vir[6],4)),
ylab="Accuracy",
main=paste("Model Accuracies -",YEAR_START,"-",YEAR_END)
)
if(NORM){
str<-"Normalized -"
} else {
str<-"Unnormalized -"
}
mtext(paste(str,"Shortlist",SHORT_CUTOFF,"cutoff"))
text(x=xx,
y=c(accs$Linear,accs$LOOCV.lm,accs$Logistic,accs$LOOCV.log,accs$Cubic,accs$LOOCV.poly),
label=round(c(accs$Linear,accs$LOOCV.lm,accs$Logistic,accs$LOOCV.log,accs$Cubic,accs$LOOCV.poly),digits=3),
pos=3
)
legend("bottomright",
c("Linear","Linear LOOCV","Logistic","Logistic LOOCV","Cubic","Cubic LOOCV"),
fill=vir,
cex=0.8
)
#######################################################
#################  PREDICT FOR 2019  ##################
#######################################################
# LOAD 2019 STATS
dat_2019_tot<-loadCurrent(normalize = FALSE)
#######################################################
#################  PREDICT FOR 2019  ##################
#######################################################
# LOAD 2019 STATS
dat_2019_tot<-loadCurrent(normalize = NORM)
# read data
str<-paste("season-stats-totals/",2019,".csv",sep="")
dat_2019<-read.csv(str, header = TRUE)
# add season column
dat_2019$Season<-2019
# clean player names
dat_2019$Player<-as.character(dat_2019$Player)
names<-strsplit(as.character(dat_2019$Player),"[\\\\]")
for (idx in 1:dim(dat_2019)[1]) {
name<-names[[idx]][1]
name<-gsub("[*]","",name)
dat_2019$Player[idx]<-name
}
## add MVP winning seasons
dat_2019$MVP<-FALSE
# add first place votes
dat_2019$First<-0
# fix data.frame classes
for (idx in c(4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33)) {
class(dat_2019[,idx])
dat_2019[,idx]<-as.numeric(type.convert(dat_2019[,idx]))
class(dat_2019[,idx])
}
# remove TOT seasons & missing observations
## needs a better fix eventually
dat_2019<-dat_2019[which(dat_2019$Tm!="TOT"),]
dat_2019<-dat_2019[complete.cases(dat_2019), ]
# normalize data
if (normalize==TRUE){
for (year in levels(as.factor(dat_2019$Season))) {
for (idx in c(4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)) {
dat_2019[,idx]<-dat_2019[,idx]/max(dat_2019[,idx])
dat_2019[,idx]<-round(dat_2019[,idx], digits = 3)
}
}
}
normalize=TRUE
# normalize data
if (normalize==TRUE){
for (year in levels(as.factor(dat_2019$Season))) {
for (idx in c(4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)) {
dat_2019[,idx]<-dat_2019[,idx]/max(dat_2019[,idx])
dat_2019[,idx]<-round(dat_2019[,idx], digits = 3)
}
}
}
# fix team strings
## standings full team name, player stats abbreviated
abbrev<-c("ATL","BOS","BRK","BUF","CHA","CHH","CHI","CHO","CLE","DAL","DEN","DET","GSW","HOU","IND","LAC","LAL",
"MEM","MIA","MIL","MIN","NJN","NOH","NOJ","NOK","NOP","NYK","NYN","OKC","ORL","PHI","PHO","POR","SAC","SAS",
"SDC","SEA","TOR","UTA","VAN","WAS","WSB","KCK")
fullnames<-c("Atlanta Hawks","Boston Celtics","Brooklyn Nets","Buffalo Braves","Charlotte Bobcats",
"Charlotte Hornets","Chicago Bulls","Charlotte Hornets","Cleveland Cavaliers","Dallas Mavericks","Denver Nuggets",
"Detroit Pistons","Golden State Warriors","Houston Rockets","Indiana Pacers","Los Angeles Clippers",
"Los Angeles Lakers","Memphis Grizzlies","Miami Heat","Milwaukee Bucks","Minnesota Timberwolves",
"New Jersey Nets","New Orleans Hornets","New Orleans Jazz","New Orleans/Oklahoma City Hornets","New Orleans Pelicans",
"New York Knicks","New York Nets","Oklahoma City Thunder","Orlando Magic","Philadelphia 76ers","Phoenix Suns",
"Portland Trail Blazers","Sacramento Kings","San Antonio Spurs","San Diego Clippers","Seattle SuperSonics",
"Toronto Raptors","Utah Jazz","Vancouver Grizzlies","Washington Wizards","Washington Bullets","Kansas City Kings")
names(fullnames)<-abbrev
# add team wins
dat_2019$Team.Wins<-0
for (team_abbrev in levels(as.factor(dat_2019$Tm))) {
for (season in levels(as.factor(dat_2019$Season))) {
team_name<-fullnames[team_abbrev]
roster<-dat_2019[which(as.character(dat_2019$Tm)==team_abbrev & as.character(dat_2019$Season)==season),]
if (dim(roster)[1]!=0) {
roster$Team.Wins<-dat_std[which(as.character(dat_std$Team)==team_name & as.character(dat_std$Season)==season),]$Wins
}
dat_2019[which(as.character(dat_2019$Tm)==team_abbrev & as.character(dat_2019$Season)==season),]<-roster
}
}
team_name<-fullnames[team_abbrev]
roster<-dat_2019[which(as.character(dat_2019$Tm)==team_abbrev & as.character(dat_2019$Season)==season),]
if (dim(roster)[1]!=0) {
roster$Team.Wins<-dat_std[which(as.character(dat_std$Team)==team_name & as.character(dat_std$Season)==season),]$Wins
}
roster
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
shortlist_2019
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
tot.lm
summarY(tot.lm)
summary(tot.lm)
lasso.coef
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
## aggregate model
agglm.cv.acc<-aggregateCV(merge.shortlist,tot.lm,pg.lm)
agglm.cv.acc
levels(dat_totals$Season)
for (year in min(dat_totals$Season):max(dat_totals$Season)) {
print(year)
}
for (year in min(dat_totals$Season):max(dat_totals$Season)) {
sub <- dat_totals[which(dat_totals$Season==year),]
mvp <-  sub[which(sub$MVP == TRUE),]
print(mvp)
}
for (year in min(dat_totals$Season):max(dat_totals$Season)) {
sub <- dat_totals[which(dat_totals$Season==year),]
mvp <-  sub[which(sub$MVP == TRUE),]
print(mvp$Season)
}
#######################################################
################## INVERSE RECENCY ####################
#######################################################
## add curr.MVP variable
dat_totals$curr.MVP <- FALSE
for (year in min(dat_totals$Season):max(dat_totals$Season)) {
sub <- dat_totals[which(dat_totals$Season==year),]
mvp <-  sub[which(sub$MVP == TRUE),]
next_year <- dat_totals[which(dat_totals$Player == mvp$Player && dat_totals$Season == (mvp$Season+1)),]
print(mvp$Player)
print(next_year$player)
}
mvp
which(dat_totals$Player == mvp$Player && dat_totals$Season == (mvp$Season+1))
which(dat_totals$Player == mvp$Player)
dat_totals$Season == (mvp$Season+1)
which(dat_totals$Season == (mvp$Season+1))
(mvp$Season+1)
#######################################################
################## INVERSE RECENCY ####################
#######################################################
## add curr.MVP variable
dat_totals$curr.MVP <- FALSE
for (year in min(dat_totals$Season):max(dat_totals$Season)-1) {
sub <- dat_totals[which(dat_totals$Season==year),]
mvp <-  sub[which(sub$MVP == TRUE),]
next_year <- dat_totals[which(dat_totals$Player == mvp$Player && dat_totals$Season == (mvp$Season+1)),]
print(mvp$Player)
print(next_year$player)
}
mvp$Player
mvp$Season+1
which(dat_totals$Season == (mvp$Season+1))
#######################################################
################## INVERSE RECENCY ####################
#######################################################
## add curr.MVP variable
dat_totals$curr.MVP <- FALSE
for (year in min(dat_totals$Season):max(dat_totals$Season)-1) {
sub <- dat_totals[which(dat_totals$Season==year),]
mvp <-  sub[which(sub$MVP == TRUE),]
mvp_seasons <- dat_totals[which(dat_totals$Player),]
}
for (year in min(dat_totals$Season):max(dat_totals$Season)-1) {
sub <- dat_totals[which(dat_totals$Season==year),]
mvp <-  sub[which(sub$MVP == TRUE),]
mvp_seasons <- dat_totals[which(dat_totals$Player==mvp$Player),]
}
mvp_seasons
max(dat_totals$Season)
max(dat_totals$Season)-1
next_year <- mvp_seasons[which(mvp_seasons$Season == mvp$Season+1),]
next_year
dat_totals[which(dat_totals==mvp),]
mvp
plot(dat_totals$Rk)
names(dat_totals)
View(dat_totals)
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
source('~/repositories/nba-models/MVPModels.R', echo=TRUE)
